#' @description A simple R script for extracting tabular data from Oryx' excellent
#'   post detailing materiel lost by all sides in the [Russian invasion of
#'   Ukraine](https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html).
#'
#'
#' @author Daniel Scarnecchia
# Setup
if (Sys.info()["sysname"] == "Linux") {
Sys.setenv(R_INSTALL_STAGED = FALSE)
print("Setting Staged Install to False")
}
library(renv)
renv::restore()
library(rvest)
library(dplyr)
library(tidyr)
library(lubridate)
library(purrr)
library(magrittr)
library(tibble)
library(stringr)
library(readr)
library(glue)
library(logr)
library(ggplot2)
library(scales)
library(ggthemes)
source("R/functions.R")
source("R/scrape_data.R")
source("R/totals_by_type.R")
source("R/per_event.R")
source("R/daily_count.R")
tmp <-
file.path("outputfiles", sprintf("scrape_oryx_%s.log", format(Sys.time(), "%Y%m%dT%H%M%S")))
lf <- logr::log_open(tmp)
today <- format(Sys.Date(), "%Y-%m-%d")
totals_by_system <- scrape_data() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_system.csv"))
#' Write Event Tables
create_event_tables(totals_by_system, status)
totals_by_system_wide <- total_by_system_wide(totals_by_system) %>%
readr::write_csv(.,
file = glue::glue("outputfiles/totals_by_system_wide.csv"))
total_by_type <- totals_by_type() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_type.csv"))
daily_count <- daily_count() %>%
readr::write_csv(., file = "outputfiles/daily_count.csv")
rmarkdown::render("index.Rmd")
logr::log_code()
logr::log_close()
writeLines(readLines(lf))
baseline <- readr::read_csv(glue::glue("inputfiles/daily_count_baseline{lubridate::today()}.csv"))
View(baseline)
baseline <- readr::read_csv(glue::glue("inputfiles/daily_count_baseline{lubridate::today()}.csv")) %>%
dplyr::group_by(country, equipment_type) %>%
dplyr::filter(date_recorded == min(date_recorded))
View(baseline)
baseline <- readr::read_csv(glue::glue("inputfiles/daily_count_baseline{lubridate::today()}.csv")) %>%
dplyr::group_by(country, equipment_type, date_recorded) %>%
dplyr::filter(date_recorded == min(date_recorded))
readr::write_csv(glue::glue("inputfiles/daily_count_baseline{lubridate::today()}.csv"))
baseline %>% readr::write_csv(glue::glue("inputfiles/daily_count_baseline{lubridate::today()}.csv"))
View(baseline)
heads <-
get_data(
"https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html",
"article div"
) %>%
rvest::html_elements("h3") %>%
rvest::html_text2()
# Drop the empty cell padding
heads <- heads[nchar(heads) > 0]
# Get the positons of the Russia and Ukraine headers
rus_pos <- heads %>% stringr::str_which("Russia") %>% as.double()
ukr_pos <- heads %>% stringr::str_which("Ukraine") %>% as.double()
totals <- tibble(
country = character(),
equipment = character(),
destroyed = character(),
abandoned = character(),
captured = character(),
damaged = character()
)
for (l in seq_along(heads)) {
totals[l, "equipment"] <-
heads[l] %>% stringr::str_remove_all(" \\(.*\\)")
totals[l, "destroyed"] <-
heads[l] %>% stringr::str_extract("destroyed: ...") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "abandoned"] <-
heads[l] %>% stringr::str_extract("(abandoned|aboned): ...") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "captured"] <-
heads[l] %>% stringr::str_extract("captured: ...") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "damaged"] <-
heads[l] %>% stringr::str_extract("damaged: ...") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
}
View(totals)
heads <-
get_data(
"https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html",
"article div"
) %>%
rvest::html_elements("h3") %>%
rvest::html_text2()
# Drop the empty cell padding
heads <- heads[nchar(heads) > 0]
# Get the positons of the Russia and Ukraine headers
rus_pos <- heads %>% stringr::str_which("Russia") %>% as.double()
ukr_pos <- heads %>% stringr::str_which("Ukraine") %>% as.double()
totals <- tibble(
country = character(),
equipment = character(),
destroyed = character(),
abandoned = character(),
captured = character(),
damaged = character()
)
totals[l, "equipment"] <-
heads[l] %>% stringr::str_remove_all(" \\(.*\\)")
heads
head %>% stringr::str_remove_all(" \\(.*\\)")
head[1]
head
heads[1]
heads[1] %>% stringr::str_remove_all(" \\(.*\\)")
heads[2] %>% stringr::str_remove_all(" \\(.*\\)")
heads[2] %>% stringr::str_extract("destroyed: ...")
heads[1] %>% stringr::str_extract("destroyed: ...")
heads[1] %>% stringr::str_extract("destroyed: ....")
heads[1] %>% stringr::str_extract("destroyed: \\d+")
heads <-
get_data(
"https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html",
"article div"
) %>%
rvest::html_elements("h3") %>%
rvest::html_text2()
# Drop the empty cell padding
heads <- heads[nchar(heads) > 0]
# Get the positons of the Russia and Ukraine headers
rus_pos <- heads %>% stringr::str_which("Russia") %>% as.double()
ukr_pos <- heads %>% stringr::str_which("Ukraine") %>% as.double()
totals <- tibble(
country = character(),
equipment = character(),
destroyed = character(),
abandoned = character(),
captured = character(),
damaged = character()
)
for (l in seq_along(heads)) {
totals[l, "equipment"] <-
heads[l] %>% stringr::str_remove_all(" \\(.*\\)")
totals[l, "destroyed"] <-
heads[l] %>% stringr::str_extract("destroyed: \\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "abandoned"] <-
heads[l] %>% stringr::str_extract("(abandoned|aboned): \\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "captured"] <-
heads[l] %>% stringr::str_extract("captured:\\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "damaged"] <-
heads[l] %>% stringr::str_extract("damaged: \\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
}
totals_df <- totals %>%
dplyr::mutate(
dplyr::across(destroyed:damaged, ~ as.double(tidyr::replace_na(.x, "0"))),
type_total = destroyed + abandoned + captured + damaged,
row_id = 1:n(),
country = dplyr::case_when(row_id < ukr_pos ~ "Russia",
row_id >= ukr_pos ~ "Ukraine")
) %>%
select(-row_id) %>%
dplyr::mutate(
equipment = replace(equipment, rus_pos, "All Types"),
equipment = replace(equipment, ukr_pos, "All Types")
) %>%
dplyr::rename(equipment_type = equipment)
return(totals_df)
}
heads <-
get_data(
"https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html",
"article div"
) %>%
rvest::html_elements("h3") %>%
rvest::html_text2()
# Drop the empty cell padding
heads <- heads[nchar(heads) > 0]
# Get the positons of the Russia and Ukraine headers
rus_pos <- heads %>% stringr::str_which("Russia") %>% as.double()
ukr_pos <- heads %>% stringr::str_which("Ukraine") %>% as.double()
totals <- tibble(
country = character(),
equipment = character(),
destroyed = character(),
abandoned = character(),
captured = character(),
damaged = character()
)
for (l in seq_along(heads)) {
totals[l, "equipment"] <-
heads[l] %>% stringr::str_remove_all(" \\(.*\\)")
totals[l, "destroyed"] <-
heads[l] %>% stringr::str_extract("destroyed: \\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "abandoned"] <-
heads[l] %>% stringr::str_extract("(abandoned|aboned): \\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "captured"] <-
heads[l] %>% stringr::str_extract("captured:\\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "damaged"] <-
heads[l] %>% stringr::str_extract("damaged: \\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
}
totals_df <- totals %>%
dplyr::mutate(
dplyr::across(destroyed:damaged, ~ as.double(tidyr::replace_na(.x, "0"))),
type_total = destroyed + abandoned + captured + damaged,
row_id = 1:n(),
country = dplyr::case_when(row_id < ukr_pos ~ "Russia",
row_id >= ukr_pos ~ "Ukraine")
) %>%
select(-row_id) %>%
dplyr::mutate(
equipment = replace(equipment, rus_pos, "All Types"),
equipment = replace(equipment, ukr_pos, "All Types")
) %>%
dplyr::rename(equipment_type = equipment)
View(totals)
View(totals_df)
heads <-
get_data(
"https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html",
"article div"
) %>%
rvest::html_elements("h3") %>%
rvest::html_text2()
# Drop the empty cell padding
heads <- heads[nchar(heads) > 0]
# Get the positons of the Russia and Ukraine headers
rus_pos <- heads %>% stringr::str_which("Russia") %>% as.double()
ukr_pos <- heads %>% stringr::str_which("Ukraine") %>% as.double()
totals <- tibble(
country = character(),
equipment = character(),
destroyed = character(),
abandoned = character(),
captured = character(),
damaged = character()
)
for (l in seq_along(heads)) {
totals[l, "equipment"] <-
heads[l] %>% stringr::str_remove_all(" \\(.*\\)")
totals[l, "destroyed"] <-
heads[l] %>% stringr::str_extract("destroyed: \\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "abandoned"] <-
heads[l] %>% stringr::str_extract("(abandoned|aboned): \\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "captured"] <-
heads[l] %>% stringr::str_extract("captured:\\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "damaged"] <-
heads[l] %>% stringr::str_extract("damaged: \\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
}
totals_df <- totals %>%
dplyr::mutate(
dplyr::across(destroyed:damaged, ~ as.double(tidyr::replace_na(.x, "0"))),
type_total = destroyed + abandoned + captured + damaged,
row_id = 1:n(),
country = dplyr::case_when(row_id < ukr_pos ~ "Russia",
row_id >= ukr_pos ~ "Ukraine")
) %>%
select(-row_id) %>%
dplyr::mutate(
equipment = replace(equipment, rus_pos, "All Types"),
equipment = replace(equipment, ukr_pos, "All Types")
) %>%
dplyr::rename(equipment_type = equipment)
heads <-
get_data(
"https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html",
"article div"
) %>%
rvest::html_elements("h3") %>%
rvest::html_text2()
# Drop the empty cell padding
heads <- heads[nchar(heads) > 0]
# Get the positons of the Russia and Ukraine headers
rus_pos <- heads %>% stringr::str_which("Russia") %>% as.double()
ukr_pos <- heads %>% stringr::str_which("Ukraine") %>% as.double()
totals <- tibble(
country = character(),
equipment = character(),
destroyed = character(),
abandoned = character(),
captured = character(),
damaged = character()
)
library(rvest)
library(dplyr)
library(tidyr)
library(lubridate)
library(purrr)
library(magrittr)
library(tibble)
library(stringr)
library(readr)
library(glue)
library(logr)
library(ggplot2)
library(scales)
library(ggthemes)
source("R/functions.R")
source("R/scrape_data.R")
source("R/totals_by_type.R")
source("R/per_event.R")
source("R/daily_count.R")
heads <-
get_data(
"https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html",
"article div"
) %>%
rvest::html_elements("h3") %>%
rvest::html_text2()
# Drop the empty cell padding
heads <- heads[nchar(heads) > 0]
# Get the positons of the Russia and Ukraine headers
rus_pos <- heads %>% stringr::str_which("Russia") %>% as.double()
ukr_pos <- heads %>% stringr::str_which("Ukraine") %>% as.double()
totals <- tibble(
country = character(),
equipment = character(),
destroyed = character(),
abandoned = character(),
captured = character(),
damaged = character()
)
for (l in seq_along(heads)) {
totals[l, "equipment"] <-
heads[l] %>% stringr::str_remove_all(" \\(.*\\)")
totals[l, "destroyed"] <-
heads[l] %>% stringr::str_extract("destroyed: \\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "abandoned"] <-
heads[l] %>% stringr::str_extract("(abandoned|aboned): \\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "captured"] <-
heads[l] %>% stringr::str_extract("captured:\\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
totals[l, "damaged"] <-
heads[l] %>% stringr::str_extract("damaged: \\d+") %>%
stringr::str_remove_all("[:alpha:]|[:punct:]")
}
totals_df <- totals %>%
dplyr::mutate(
dplyr::across(destroyed:damaged, ~ as.double(tidyr::replace_na(.x, "0"))),
type_total = destroyed + abandoned + captured + damaged,
row_id = 1:n(),
country = dplyr::case_when(row_id < ukr_pos ~ "Russia",
row_id >= ukr_pos ~ "Ukraine")
) %>%
select(-row_id) %>%
dplyr::mutate(
equipment = replace(equipment, rus_pos, "All Types"),
equipment = replace(equipment, ukr_pos, "All Types")
) %>%
dplyr::rename(equipment_type = equipment)
View(totals_df)
daily_count <- daily_count() %>%
readr::write_csv(., file = "outputfiles/daily_count.csv")
total_by_type <- totals_by_type() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_type.csv"))
View(total_by_type)
library(rvest)
library(dplyr)
library(tidyr)
library(lubridate)
library(purrr)
library(magrittr)
library(tibble)
library(stringr)
library(readr)
library(glue)
library(logr)
library(ggplot2)
library(scales)
library(ggthemes)
source("R/functions.R")
source("R/scrape_data.R")
source("R/totals_by_type.R")
source("R/per_event.R")
source("R/daily_count.R")
total_by_type <- totals_by_type() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_type.csv"))
View(total_by_type)
#!/usr/bin/env Rscript
#' @title scrape_oryx
#' @description A simple R script for extracting tabular data from Oryx' excellent
#'   post detailing materiel lost by all sides in the [Russian invasion of
#'   Ukraine](https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html).
#'
#'
#' @author Daniel Scarnecchia
# Setup
if (Sys.info()["sysname"] == "Linux") {
Sys.setenv(R_INSTALL_STAGED = FALSE)
print("Setting Staged Install to False")
}
library(renv)
renv::restore()
library(rvest)
library(dplyr)
library(tidyr)
library(lubridate)
library(purrr)
library(magrittr)
library(tibble)
library(stringr)
library(readr)
library(glue)
library(logr)
library(ggplot2)
library(scales)
library(ggthemes)
source("R/functions.R")
source("R/scrape_data.R")
source("R/totals_by_type.R")
source("R/per_event.R")
source("R/daily_count.R")
tmp <-
file.path("outputfiles", sprintf("scrape_oryx_%s.log", format(Sys.time(), "%Y%m%dT%H%M%S")))
lf <- logr::log_open(tmp)
today <- format(Sys.Date(), "%Y-%m-%d")
totals_by_system <- scrape_data() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_system.csv"))
#' Write Event Tables
create_event_tables(totals_by_system, status)
totals_by_system_wide <- total_by_system_wide(totals_by_system) %>%
readr::write_csv(.,
file = glue::glue("outputfiles/totals_by_system_wide.csv"))
total_by_type <- totals_by_type() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_type.csv"))
daily_count <- daily_count() %>%
readr::write_csv(., file = "outputfiles/daily_count.csv")
rmarkdown::render("index.Rmd")
logr::log_code()
logr::log_close()
writeLines(readLines(lf))
View(total_by_type)
View(daily_count)
#!/usr/bin/env Rscript
#' @title scrape_oryx
#' @description A simple R script for extracting tabular data from Oryx' excellent
#'   post detailing materiel lost by all sides in the [Russian invasion of
#'   Ukraine](https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html).
#'
#'
#' @author Daniel Scarnecchia
# Setup
if (Sys.info()["sysname"] == "Linux") {
Sys.setenv(R_INSTALL_STAGED = FALSE)
print("Setting Staged Install to False")
}
library(renv)
renv::restore()
library(rvest)
library(dplyr)
library(tidyr)
library(lubridate)
library(purrr)
library(magrittr)
library(tibble)
library(stringr)
library(readr)
library(glue)
library(logr)
library(ggplot2)
library(scales)
library(ggthemes)
source("R/functions.R")
source("R/scrape_data.R")
source("R/totals_by_type.R")
source("R/per_event.R")
source("R/daily_count.R")
tmp <-
file.path("outputfiles", sprintf("scrape_oryx_%s.log", format(Sys.time(), "%Y%m%dT%H%M%S")))
lf <- logr::log_open(tmp)
today <- format(Sys.Date(), "%Y-%m-%d")
totals_by_system <- scrape_data() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_system.csv"))
#' Write Event Tables
create_event_tables(totals_by_system, status)
totals_by_system_wide <- total_by_system_wide(totals_by_system) %>%
readr::write_csv(.,
file = glue::glue("outputfiles/totals_by_system_wide.csv"))
total_by_type <- totals_by_type() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_type.csv"))
daily_count <- daily_count() %>%
readr::write_csv(., file = "outputfiles/daily_count.csv")
rmarkdown::render("index.Rmd")
logr::log_code()
logr::log_close()
writeLines(readLines(lf))
