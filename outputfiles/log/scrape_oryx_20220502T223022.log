[1] "Error in assign(\"last.warning\", NULL, envir = baseenv()) : \n  cannot change value of locked binding for 'last.warning'\nCalls: <Anonymous> -> assign\n"
Traceback: 
[1] "2: assign(\"last.warning\", NULL, envir = baseenv())"
[2] "1: logr::log_open(tmp)"                              

inputfiles/totals_by_system2022-04-08.csv
inputfiles/totals_by_system2022-04-09.csv
inputfiles/totals_by_system2022-04-10.csv
inputfiles/totals_by_system2022-04-11.csv
inputfiles/totals_by_system2022-04-12.csv
inputfiles/totals_by_system2022-04-14.csv
inputfiles/totals_by_system2022-04-15.csv
inputfiles/totals_by_system2022-04-16.csv
inputfiles/totals_by_system2022-04-17.csv
inputfiles/totals_by_system2022-04-18.csv
inputfiles/totals_by_system2022-04-19.csv
inputfiles/totals_by_system2022-04-20.csv
inputfiles/totals_by_system2022-04-21.csv
inputfiles/totals_by_system2022-04-22.csv
inputfiles/totals_by_system2022-04-23.csv
inputfiles/totals_by_system2022-04-24.csv
inputfiles/totals_by_system2022-04-25.csv
inputfiles/totals_by_system2022-04-26.csv
inputfiles/totals_by_system2022-04-08.csv
inputfiles/totals_by_system2022-04-09.csv
inputfiles/totals_by_system2022-04-10.csv
inputfiles/totals_by_system2022-04-11.csv
inputfiles/totals_by_system2022-04-12.csv
inputfiles/totals_by_system2022-04-14.csv
inputfiles/totals_by_system2022-04-15.csv
inputfiles/totals_by_system2022-04-16.csv
inputfiles/totals_by_system2022-04-17.csv
inputfiles/totals_by_system2022-04-18.csv
inputfiles/totals_by_system2022-04-19.csv
inputfiles/totals_by_system2022-04-20.csv
inputfiles/totals_by_system2022-04-21.csv
inputfiles/totals_by_system2022-04-22.csv
inputfiles/totals_by_system2022-04-23.csv
inputfiles/totals_by_system2022-04-24.csv
inputfiles/totals_by_system2022-04-25.csv
inputfiles/totals_by_system2022-04-26.csv

[1] "Error in if (e$log_show_notes == TRUE) { : argument is of length zero\nCalls: %>% ... <Anonymous> -> log_print -> print_other -> tryCatch\n"
[1] "Error in if (e$log_show_notes == TRUE) { : argument is of length zero\nCalls: %>% ... <Anonymous> -> log_print -> print_other -> tryCatch\n"
[1] "Traceback:"
Traceback: 
 [1] "17: tryCatch({"                                                                                                 
 [2] "        f <- file(file_path, open = \"a\", encoding = \"UTF-8\")"                                               
 [3] "        sink(f, append = TRUE)"                                                                                 
 [4] "        if (all(class(x) == \"character\")) {"                                                                  
 [5] "            if (length(x) == 1 && nchar(x) < 100) {"                                                            
 [6] "                cat(x, \"\\n\")"                                                                                
 [7] "            }"                                                                                                  
 [8] "            else {"                                                                                             
 [9] "                withr::with_options(c(crayon.colors = 1), {"                                                    
[10] "                    print(x, ..., )"                                                                            
[11] "                })"                                                                                             
[12] "            }"                                                                                                  
[13] "        }"                                                                                                      
[14] "        else {"                                                                                                 
[15] "            withr::with_options(c(crayon.colors = 1), {"                                                        
[16] "                print(x, ...)"                                                                                  
[17] "            })"                                                                                                 
[18] "        }"                                                                                                      
[19] "        if (blank_after == TRUE) "                                                                              
[20] "            cat(\"\\n\")"                                                                                       
[21] "    }, error = function(cond) {"                                                                                
[22] "        print(\"Error: Object cannot be printed to log\\n\")"                                                   
[23] "    }, finally = {"                                                                                             
[24] "        if (hide_notes == FALSE) {"                                                                             
[25] "            tc <- Sys.time()"                                                                                   
[26] "            if (e$log_show_notes == TRUE) {"                                                                    
[27] "                if (any(class(x) == \"data.frame\")) {"                                                         
[28] "                    cat(paste(\"NOTE: Data frame has\", nrow(x), \"rows and\", "                                
[29] "                      ncol(x), \"columns.\"), \"\\n\")"                                                         
[30] "                    cat(\"\\n\")"                                                                               
[31] "                }"                                                                                              
[32] "                cat(paste(\"NOTE: Log Print Time: \", tc), \"\\n\")"                                            
[33] "                cat(paste(\"NOTE: Elapsed Time in seconds:\", get_time_diff(tc)), "                             
[34] "                    \"\\n\")"                                                                                   
[35] "                cat(\"\\n\")"                                                                                   
[36] "            }"                                                                                                  
[37] "        }"                                                                                                      
[38] "        sink()"                                                                                                 
[39] "        close(f)"                                                                                               
[40] "    })"                                                                                                         
[41] "16: print_other(x, file_path, blank_after, hide_notes, ...)"                                                    
[42] "15: log_print(x, ..., console = console, blank_after = blank_after, "                                           
[43] "        msg = msg, hide_notes = hide_notes)"                                                                    
[44] "14: logr::put(path)"                                                                                            
[45] "13: get_inputfile(\"totals_by_system\")"                                                                        
[46] "12: dplyr::ungroup(.)"                                                                                          
[47] "11: dplyr::mutate(., dplyr::across(tidyr::everything(), ~stringr::str_trim(., "                                 
[48] "        )))"                                                                                                    
[49] "10: indsn %>% dplyr::ungroup() %>% dplyr::mutate(dplyr::across(tidyr::everything(), "                           
[50] "        ~stringr::str_trim(., )))"                                                                              
[51] "9: trim_all(.)"                                                                                                 
[52] "8: dplyr::mutate(., date_recorded = as.Date(date_recorded))"                                                    
[53] "7: get_inputfile(\"totals_by_system\") %>% trim_all() %>% dplyr::mutate(date_recorded = as.Date(date_recorded))"
[54] "6: create_data()"                                                                                               
[55] "5: is.data.frame(x)"                                                                                            
[56] "4: stopifnot(is.data.frame(x))"                                                                                 
[57] "3: write_delim(x, file, delim = \",\", na = na, append = append, col_names = col_names, "                       
[58] "       quote = quote, escape = escape, eol = eol, num_threads = num_threads, "                                  
[59] "       progress = progress)"                                                                                    
[60] "2: readr::write_csv(., file = glue::glue(\"outputfiles/totals_by_system.csv\"))"                                
[61] "1: create_data() %>% readr::write_csv(., file = glue::glue(\"outputfiles/totals_by_system.csv\"))"              
 [1] "17: tryCatch({"                                                                                                 
 [2] "        f <- file(file_path, open = \"a\", encoding = \"UTF-8\")"                                               
 [3] "        sink(f, append = TRUE)"                                                                                 
 [4] "        if (all(class(x) == \"character\")) {"                                                                  
 [5] "            if (length(x) == 1 && nchar(x) < 100) {"                                                            
 [6] "                cat(x, \"\\n\")"                                                                                
 [7] "            }"                                                                                                  
 [8] "            else {"                                                                                             
 [9] "                withr::with_options(c(crayon.colors = 1), {"                                                    
[10] "                    print(x, ..., )"                                                                            
[11] "                })"                                                                                             
[12] "            }"                                                                                                  
[13] "        }"                                                                                                      
[14] "        else {"                                                                                                 
[15] "            withr::with_options(c(crayon.colors = 1), {"                                                        
[16] "                print(x, ...)"                                                                                  
[17] "            })"                                                                                                 
[18] "        }"                                                                                                      
[19] "        if (blank_after == TRUE) "                                                                              
[20] "            cat(\"\\n\")"                                                                                       
[21] "    }, error = function(cond) {"                                                                                
[22] "        print(\"Error: Object cannot be printed to log\\n\")"                                                   
[23] "    }, finally = {"                                                                                             
[24] "        if (hide_notes == FALSE) {"                                                                             
[25] "            tc <- Sys.time()"                                                                                   
[26] "            if (e$log_show_notes == TRUE) {"                                                                    
[27] "                if (any(class(x) == \"data.frame\")) {"                                                         
[28] "                    cat(paste(\"NOTE: Data frame has\", nrow(x), \"rows and\", "                                
[29] "                      ncol(x), \"columns.\"), \"\\n\")"                                                         
[30] "                    cat(\"\\n\")"                                                                               
[31] "                }"                                                                                              
[32] "                cat(paste(\"NOTE: Log Print Time: \", tc), \"\\n\")"                                            
[33] "                cat(paste(\"NOTE: Elapsed Time in seconds:\", get_time_diff(tc)), "                             
[34] "                    \"\\n\")"                                                                                   
[35] "                cat(\"\\n\")"                                                                                   
[36] "            }"                                                                                                  
[37] "        }"                                                                                                      
[38] "        sink()"                                                                                                 
[39] "        close(f)"                                                                                               
[40] "    })"                                                                                                         
[41] "16: print_other(x, file_path, blank_after, hide_notes, ...)"                                                    
[42] "15: log_print(x, ..., console = console, blank_after = blank_after, "                                           
[43] "        msg = msg, hide_notes = hide_notes)"                                                                    
[44] "14: logr::put(path)"                                                                                            
[45] "13: get_inputfile(\"totals_by_system\")"                                                                        
[46] "12: dplyr::ungroup(.)"                                                                                          
[47] "11: dplyr::mutate(., dplyr::across(tidyr::everything(), ~stringr::str_trim(., "                                 
[48] "        )))"                                                                                                    
[49] "10: indsn %>% dplyr::ungroup() %>% dplyr::mutate(dplyr::across(tidyr::everything(), "                           
[50] "        ~stringr::str_trim(., )))"                                                                              
[51] "9: trim_all(.)"                                                                                                 
[52] "8: dplyr::mutate(., date_recorded = as.Date(date_recorded))"                                                    
[53] "7: get_inputfile(\"totals_by_system\") %>% trim_all() %>% dplyr::mutate(date_recorded = as.Date(date_recorded))"
[54] "6: create_data()"                                                                                               
[55] "5: is.data.frame(x)"                                                                                            
[56] "4: stopifnot(is.data.frame(x))"                                                                                 
[57] "3: write_delim(x, file, delim = \",\", na = na, append = append, col_names = col_names, "                       
[58] "       quote = quote, escape = escape, eol = eol, num_threads = num_threads, "                                  
[59] "       progress = progress)"                                                                                    
[60] "2: readr::write_csv(., file = glue::glue(\"outputfiles/totals_by_system.csv\"))"                                
[61] "1: create_data() %>% readr::write_csv(., file = glue::glue(\"outputfiles/totals_by_system.csv\"))"              

[1] "Error in dplyr::ungroup(.) : object 'totals_by_system' not found\nCalls: create_event_tables -> %>% -> <Anonymous>\n"
[1] "Error in dplyr::ungroup(.) : object 'totals_by_system' not found\nCalls: create_event_tables -> %>% -> <Anonymous>\n"
[1] "Traceback:"
Traceback: 
[1] "3: dplyr::ungroup(.)"                            
[2] "2: indsn %>% dplyr::ungroup()"                   
[3] "1: create_event_tables(totals_by_system, status)"
[1] "3: dplyr::ungroup(.)"                            
[2] "2: indsn %>% dplyr::ungroup()"                   
[3] "1: create_event_tables(totals_by_system, status)"

[1] "Error in dplyr::select(., country, system, status) : \n  object 'totals_by_system' not found\nCalls: %>% ... <Anonymous> -> <Anonymous> -> <Anonymous> -> <Anonymous>\n"
[1] "Error in dplyr::select(., country, system, status) : \n  object 'totals_by_system' not found\nCalls: %>% ... <Anonymous> -> <Anonymous> -> <Anonymous> -> <Anonymous>\n"
[1] "Traceback:"
Traceback: 
 [1] "13: dplyr::select(., country, system, status)"                                                        
 [2] "12: dplyr::group_by(., country, system, status)"                                                      
 [3] "11: dplyr::summarise(., count = n())"                                                                 
 [4] "10: tidyr::pivot_wider(., names_from = status, values_from = count)"                                  
 [5] "9: dplyr::ungroup(.)"                                                                                 
 [6] "8: dplyr::mutate(., dplyr::across(where(is.numeric), ~tidyr::replace_na(.x, "                         
 [7] "       0)), total = destroyed + captured + damaged + abandoned)"                                      
 [8] "7: indsn %>% dplyr::select(country, system, status) %>% dplyr::group_by(country, "                    
 [9] "       system, status) %>% dplyr::summarise(count = n()) %>% tidyr::pivot_wider(names_from = status, "
[10] "       values_from = count) %>% dplyr::ungroup() %>% dplyr::mutate(dplyr::across(where(is.numeric), " 
[11] "       ~tidyr::replace_na(.x, 0)), total = destroyed + captured + "                                   
[12] "       damaged + abandoned)"                                                                          
[13] "6: total_by_system_wide(totals_by_system)"                                                            
[14] "5: is.data.frame(x)"                                                                                  
[15] "4: stopifnot(is.data.frame(x))"                                                                       
[16] "3: write_delim(x, file, delim = \",\", na = na, append = append, col_names = col_names, "             
[17] "       quote = quote, escape = escape, eol = eol, num_threads = num_threads, "                        
[18] "       progress = progress)"                                                                          
[19] "2: readr::write_csv(., file = glue::glue(\"outputfiles/totals_by_system_wide.csv\"))"                 
[20] "1: total_by_system_wide(totals_by_system) %>% readr::write_csv(., "                                   
[21] "       file = glue::glue(\"outputfiles/totals_by_system_wide.csv\"))"                                 
 [1] "13: dplyr::select(., country, system, status)"                                                        
 [2] "12: dplyr::group_by(., country, system, status)"                                                      
 [3] "11: dplyr::summarise(., count = n())"                                                                 
 [4] "10: tidyr::pivot_wider(., names_from = status, values_from = count)"                                  
 [5] "9: dplyr::ungroup(.)"                                                                                 
 [6] "8: dplyr::mutate(., dplyr::across(where(is.numeric), ~tidyr::replace_na(.x, "                         
 [7] "       0)), total = destroyed + captured + damaged + abandoned)"                                      
 [8] "7: indsn %>% dplyr::select(country, system, status) %>% dplyr::group_by(country, "                    
 [9] "       system, status) %>% dplyr::summarise(count = n()) %>% tidyr::pivot_wider(names_from = status, "
[10] "       values_from = count) %>% dplyr::ungroup() %>% dplyr::mutate(dplyr::across(where(is.numeric), " 
[11] "       ~tidyr::replace_na(.x, 0)), total = destroyed + captured + "                                   
[12] "       damaged + abandoned)"                                                                          
[13] "6: total_by_system_wide(totals_by_system)"                                                            
[14] "5: is.data.frame(x)"                                                                                  
[15] "4: stopifnot(is.data.frame(x))"                                                                       
[16] "3: write_delim(x, file, delim = \",\", na = na, append = append, col_names = col_names, "             
[17] "       quote = quote, escape = escape, eol = eol, num_threads = num_threads, "                        
[18] "       progress = progress)"                                                                          
[19] "2: readr::write_csv(., file = glue::glue(\"outputfiles/totals_by_system_wide.csv\"))"                 
[20] "1: total_by_system_wide(totals_by_system) %>% readr::write_csv(., "                                   
[21] "       file = glue::glue(\"outputfiles/totals_by_system_wide.csv\"))"                                 

inputfiles/daily_count_baseline.csv
inputfiles/daily_count_baseline2022-03-28.csv
inputfiles/daily_count_baseline2022-03-29.csv
inputfiles/daily_count_baseline2022-03-30.csv
inputfiles/daily_count_baseline2022-03-31.csv
inputfiles/daily_count_baseline2022-04-01.csv
inputfiles/daily_count_baseline2022-04-02.csv
inputfiles/daily_count_baseline2022-04-03.csv
inputfiles/daily_count_baseline2022-04-04.csv
inputfiles/daily_count_baseline2022-04-05.csv
inputfiles/daily_count_baseline2022-04-07.csv
inputfiles/daily_count_baseline2022-04-08.csv
inputfiles/daily_count_baseline2022-04-09.csv
inputfiles/daily_count_baseline2022-04-10.csv
inputfiles/daily_count_baseline2022-04-11.csv
inputfiles/daily_count_baseline2022-04-12.csv
inputfiles/daily_count_baseline2022-04-14.csv
inputfiles/daily_count_baseline2022-04-15.csv
inputfiles/daily_count_baseline2022-04-16.csv
inputfiles/daily_count_baseline2022-04-17.csv
inputfiles/daily_count_baseline2022-04-18.csv
inputfiles/daily_count_baseline2022-04-19.csv
inputfiles/daily_count_baseline2022-04-20.csv
inputfiles/daily_count_baseline2022-04-21.csv
inputfiles/daily_count_baseline2022-04-22.csv
inputfiles/daily_count_baseline2022-04-23.csv
inputfiles/daily_count_baseline2022-04-24.csv
inputfiles/daily_count_baseline2022-04-25.csv
inputfiles/daily_count_baseline2022-04-26.csv
inputfiles/daily_count_baseline.csv
inputfiles/daily_count_baseline2022-03-28.csv
inputfiles/daily_count_baseline2022-03-29.csv
inputfiles/daily_count_baseline2022-03-30.csv
inputfiles/daily_count_baseline2022-03-31.csv
inputfiles/daily_count_baseline2022-04-01.csv
inputfiles/daily_count_baseline2022-04-02.csv
inputfiles/daily_count_baseline2022-04-03.csv
inputfiles/daily_count_baseline2022-04-04.csv
inputfiles/daily_count_baseline2022-04-05.csv
inputfiles/daily_count_baseline2022-04-07.csv
inputfiles/daily_count_baseline2022-04-08.csv
inputfiles/daily_count_baseline2022-04-09.csv
inputfiles/daily_count_baseline2022-04-10.csv
inputfiles/daily_count_baseline2022-04-11.csv
inputfiles/daily_count_baseline2022-04-12.csv
inputfiles/daily_count_baseline2022-04-14.csv
inputfiles/daily_count_baseline2022-04-15.csv
inputfiles/daily_count_baseline2022-04-16.csv
inputfiles/daily_count_baseline2022-04-17.csv
inputfiles/daily_count_baseline2022-04-18.csv
inputfiles/daily_count_baseline2022-04-19.csv
inputfiles/daily_count_baseline2022-04-20.csv
inputfiles/daily_count_baseline2022-04-21.csv
inputfiles/daily_count_baseline2022-04-22.csv
inputfiles/daily_count_baseline2022-04-23.csv
inputfiles/daily_count_baseline2022-04-24.csv
inputfiles/daily_count_baseline2022-04-25.csv
inputfiles/daily_count_baseline2022-04-26.csv

[1] "Error in if (e$log_show_notes == TRUE) { : argument is of length zero\nCalls: %>% ... <Anonymous> -> log_print -> print_other -> tryCatch\n"
[1] "Error in if (e$log_show_notes == TRUE) { : argument is of length zero\nCalls: %>% ... <Anonymous> -> log_print -> print_other -> tryCatch\n"
[1] "Traceback:"
Traceback: 
 [1] "11: tryCatch({"                                                                          
 [2] "        f <- file(file_path, open = \"a\", encoding = \"UTF-8\")"                        
 [3] "        sink(f, append = TRUE)"                                                          
 [4] "        if (all(class(x) == \"character\")) {"                                           
 [5] "            if (length(x) == 1 && nchar(x) < 100) {"                                     
 [6] "                cat(x, \"\\n\")"                                                         
 [7] "            }"                                                                           
 [8] "            else {"                                                                      
 [9] "                withr::with_options(c(crayon.colors = 1), {"                             
[10] "                    print(x, ..., )"                                                     
[11] "                })"                                                                      
[12] "            }"                                                                           
[13] "        }"                                                                               
[14] "        else {"                                                                          
[15] "            withr::with_options(c(crayon.colors = 1), {"                                 
[16] "                print(x, ...)"                                                           
[17] "            })"                                                                          
[18] "        }"                                                                               
[19] "        if (blank_after == TRUE) "                                                       
[20] "            cat(\"\\n\")"                                                                
[21] "    }, error = function(cond) {"                                                         
[22] "        print(\"Error: Object cannot be printed to log\\n\")"                            
[23] "    }, finally = {"                                                                      
[24] "        if (hide_notes == FALSE) {"                                                      
[25] "            tc <- Sys.time()"                                                            
[26] "            if (e$log_show_notes == TRUE) {"                                             
[27] "                if (any(class(x) == \"data.frame\")) {"                                  
[28] "                    cat(paste(\"NOTE: Data frame has\", nrow(x), \"rows and\", "         
[29] "                      ncol(x), \"columns.\"), \"\\n\")"                                  
[30] "                    cat(\"\\n\")"                                                        
[31] "                }"                                                                       
[32] "                cat(paste(\"NOTE: Log Print Time: \", tc), \"\\n\")"                     
[33] "                cat(paste(\"NOTE: Elapsed Time in seconds:\", get_time_diff(tc)), "      
[34] "                    \"\\n\")"                                                            
[35] "                cat(\"\\n\")"                                                            
[36] "            }"                                                                           
[37] "        }"                                                                               
[38] "        sink()"                                                                          
[39] "        close(f)"                                                                        
[40] "    })"                                                                                  
[41] "10: print_other(x, file_path, blank_after, hide_notes, ...)"                             
[42] "9: log_print(x, ..., console = console, blank_after = blank_after, "                     
[43] "       msg = msg, hide_notes = hide_notes)"                                              
[44] "8: logr::put(path)"                                                                      
[45] "7: get_inputfile(\"daily_count_baseline\")"                                              
[46] "6: daily_count()"                                                                        
[47] "5: is.data.frame(x)"                                                                     
[48] "4: stopifnot(is.data.frame(x))"                                                          
[49] "3: write_delim(x, file, delim = \",\", na = na, append = append, col_names = col_names, "
[50] "       quote = quote, escape = escape, eol = eol, num_threads = num_threads, "           
[51] "       progress = progress)"                                                             
[52] "2: readr::write_csv(., file = \"outputfiles/daily_count.csv\")"                          
[53] "1: daily_count() %>% readr::write_csv(., file = \"outputfiles/daily_count.csv\")"        
 [1] "11: tryCatch({"                                                                          
 [2] "        f <- file(file_path, open = \"a\", encoding = \"UTF-8\")"                        
 [3] "        sink(f, append = TRUE)"                                                          
 [4] "        if (all(class(x) == \"character\")) {"                                           
 [5] "            if (length(x) == 1 && nchar(x) < 100) {"                                     
 [6] "                cat(x, \"\\n\")"                                                         
 [7] "            }"                                                                           
 [8] "            else {"                                                                      
 [9] "                withr::with_options(c(crayon.colors = 1), {"                             
[10] "                    print(x, ..., )"                                                     
[11] "                })"                                                                      
[12] "            }"                                                                           
[13] "        }"                                                                               
[14] "        else {"                                                                          
[15] "            withr::with_options(c(crayon.colors = 1), {"                                 
[16] "                print(x, ...)"                                                           
[17] "            })"                                                                          
[18] "        }"                                                                               
[19] "        if (blank_after == TRUE) "                                                       
[20] "            cat(\"\\n\")"                                                                
[21] "    }, error = function(cond) {"                                                         
[22] "        print(\"Error: Object cannot be printed to log\\n\")"                            
[23] "    }, finally = {"                                                                      
[24] "        if (hide_notes == FALSE) {"                                                      
[25] "            tc <- Sys.time()"                                                            
[26] "            if (e$log_show_notes == TRUE) {"                                             
[27] "                if (any(class(x) == \"data.frame\")) {"                                  
[28] "                    cat(paste(\"NOTE: Data frame has\", nrow(x), \"rows and\", "         
[29] "                      ncol(x), \"columns.\"), \"\\n\")"                                  
[30] "                    cat(\"\\n\")"                                                        
[31] "                }"                                                                       
[32] "                cat(paste(\"NOTE: Log Print Time: \", tc), \"\\n\")"                     
[33] "                cat(paste(\"NOTE: Elapsed Time in seconds:\", get_time_diff(tc)), "      
[34] "                    \"\\n\")"                                                            
[35] "                cat(\"\\n\")"                                                            
[36] "            }"                                                                           
[37] "        }"                                                                               
[38] "        sink()"                                                                          
[39] "        close(f)"                                                                        
[40] "    })"                                                                                  
[41] "10: print_other(x, file_path, blank_after, hide_notes, ...)"                             
[42] "9: log_print(x, ..., console = console, blank_after = blank_after, "                     
[43] "       msg = msg, hide_notes = hide_notes)"                                              
[44] "8: logr::put(path)"                                                                      
[45] "7: get_inputfile(\"daily_count_baseline\")"                                              
[46] "6: daily_count()"                                                                        
[47] "5: is.data.frame(x)"                                                                     
[48] "4: stopifnot(is.data.frame(x))"                                                          
[49] "3: write_delim(x, file, delim = \",\", na = na, append = append, col_names = col_names, "
[50] "       quote = quote, escape = escape, eol = eol, num_threads = num_threads, "           
[51] "       progress = progress)"                                                             
[52] "2: readr::write_csv(., file = \"outputfiles/daily_count.csv\")"                          
[53] "1: daily_count() %>% readr::write_csv(., file = \"outputfiles/daily_count.csv\")"        

  |                                                                              |                                                                      |   0%  |                                                                              |......                                                                |   8%
   inline R code fragments

  |                                                                              |............                                                          |  17%
label: setup (with options) 
List of 1
 $ include: logi FALSE

  |                                                                              |..................                                                    |  25%
  ordinary text without R code

  |                                                                              |.......................                                               |  33%
label: daily_graph (with options) 
List of 4
 $ fig.align: chr "center"
 $ echo     : logi FALSE
 $ warning  : logi FALSE
 $ message  : logi FALSE

[1] "Error in UseMethod(\"filter\") : \n  no applicable method for 'filter' applied to an object of class \"function\"\nCalls: <Anonymous> ... <Anonymous> -> <Anonymous> -> <Anonymous> -> <Anonymous>\n"
Traceback: 
 [1] "26: dplyr::filter(., equipment_type == type_id)"                                                                      
 [2] "25: dplyr::rename(., count = count_type)"                                                                             
 [3] "24: dplyr::select(., country, equipment_type, count, date_recorded)"                                                  
 [4] "23: dplyr::arrange(., date_recorded)"                                                                                 
 [5] "22: indsn %>% dplyr::filter(equipment_type == type_id) %>% dplyr::rename(count = count_type) %>% "                    
 [6] "        dplyr::select(country, equipment_type, count, date_recorded) %>% "                                            
 [7] "        dplyr::arrange(date_recorded)"                                                                                
 [8] "21: graph_counts(daily_count, \"All Types\", \"type_total\")"                                                         
 [9] "20: eval(expr, envir, enclos)"                                                                                        
[10] "19: eval(expr, envir, enclos)"                                                                                        
[11] "18: eval_with_user_handlers(expr, envir, enclos, user_handlers)"                                                      
[12] "17: withVisible(eval_with_user_handlers(expr, envir, enclos, user_handlers))"                                         
[13] "16: withCallingHandlers(withVisible(eval_with_user_handlers(expr, "                                                   
[14] "        envir, enclos, user_handlers)), warning = wHandler, error = eHandler, "                                       
[15] "        message = mHandler)"                                                                                          
[16] "15: handle(ev <- withCallingHandlers(withVisible(eval_with_user_handlers(expr, "                                      
[17] "        envir, enclos, user_handlers)), warning = wHandler, error = eHandler, "                                       
[18] "        message = mHandler))"                                                                                         
[19] "14: timing_fn(handle(ev <- withCallingHandlers(withVisible(eval_with_user_handlers(expr, "                            
[20] "        envir, enclos, user_handlers)), warning = wHandler, error = eHandler, "                                       
[21] "        message = mHandler)))"                                                                                        
[22] "13: evaluate_call(expr, parsed$src[[i]], envir = envir, enclos = enclos, "                                            
[23] "        debug = debug, last = i == length(out), use_try = stop_on_error != "                                          
[24] "            2L, keep_warning = keep_warning, keep_message = keep_message, "                                           
[25] "        output_handler = output_handler, include_timing = include_timing)"                                            
[26] "12: evaluate::evaluate(...)"                                                                                          
[27] "11: evaluate(code, envir = env, new_device = FALSE, keep_warning = !isFALSE(options$warning), "                       
[28] "        keep_message = !isFALSE(options$message), stop_on_error = if (is.numeric(options$error)) options$error else {"
[29] "            if (options$error && options$include) "                                                                   
[30] "                0L"                                                                                                   
[31] "            else 2L"                                                                                                  
[32] "        }, output_handler = knit_handlers(options$render, options))"                                                  
[33] "10: in_dir(input_dir(), evaluate(code, envir = env, new_device = FALSE, "                                             
[34] "        keep_warning = !isFALSE(options$warning), keep_message = !isFALSE(options$message), "                         
[35] "        stop_on_error = if (is.numeric(options$error)) options$error else {"                                          
[36] "            if (options$error && options$include) "                                                                   
[37] "                0L"                                                                                                   
[38] "            else 2L"                                                                                                  
[39] "        }, output_handler = knit_handlers(options$render, options)))"                                                 
[40] "9: eng_r(options)"                                                                                                    
[41] "8: block_exec(params)"                                                                                                
[42] "7: call_block(x)"                                                                                                     
[43] "6: process_group.block(group)"                                                                                        
[44] "5: process_group(group)"                                                                                              
[45] "4: withCallingHandlers(if (tangle) process_tangle(group) else process_group(group), "                                 
[46] "       error = function(e) {"                                                                                         
[47] "           setwd(wd)"                                                                                                 
[48] "           cat(res, sep = \"\\n\", file = output %n% \"\")"                                                           
[49] "           message(\"Quitting from lines \", paste(current_lines(i), "                                                
[50] "               collapse = \"-\"), \" (\", knit_concord$get(\"infile\"), "                                             
[51] "               \") \")"                                                                                               
[52] "       })"                                                                                                            
[53] "3: process_file(text, output)"                                                                                        
[54] "2: knitr::knit(knit_input, knit_output, envir = envir, quiet = quiet)"                                                
[55] "1: rmarkdown::render(\"index.Rmd\")"                                                                                  

[1] "Error in stdout() : invalid connection\nCalls: <Anonymous> ... close.txtProgressBar -> <Anonymous> -> cat -> stdout\n"
[1] "Error in stdout() : invalid connection\nCalls: <Anonymous> ... close.txtProgressBar -> <Anonymous> -> cat -> stdout\n"
[1] "Traceback:"
Traceback: 
[1] "8: stdout()"                                                          
[2] "7: cat(\"\\n\", file = file)"                                         
[3] "6: con$kill()"                                                        
[4] "5: close.txtProgressBar(pb)"                                          
[5] "4: close(pb)"                                                         
[6] "3: process_file(text, output)"                                        
[7] "2: knitr::knit(knit_input, knit_output, envir = envir, quiet = quiet)"
[8] "1: rmarkdown::render(\"index.Rmd\")"                                  
[1] "8: stdout()"                                                          
[2] "7: cat(\"\\n\", file = file)"                                         
[3] "6: con$kill()"                                                        
[4] "5: close.txtProgressBar(pb)"                                          
[5] "4: close(pb)"                                                         
[6] "3: process_file(text, output)"                                        
[7] "2: knitr::knit(knit_input, knit_output, envir = envir, quiet = quiet)"
[8] "1: rmarkdown::render(\"index.Rmd\")"                                  

> #!/usr/bin/env Rscript
> #' @title scrape_oryx
> #' @description A simple R script for extracting tabular data from Oryx' excellent
> #'   post detailing materiel lost by all sides in the [Russian invasion of
> #'   Ukraine](https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html).
> #'
> #'
> #' @author Daniel Scarnecchia
> 
> # Setup
> if (Sys.info()["sysname"] == "Linux") {
>   Sys.setenv(R_INSTALL_STAGED = FALSE)
>   print("Setting Staged Install to False")
> }
> 
> library(renv)
> renv::restore()
> library(rvest)
> library(dplyr)
> library(tidyr)
> library(lubridate)
> library(purrr)
> library(magrittr)
> library(tibble)
> library(stringr)
> library(readr)
> library(glue)
> library(logr)
> library(ggplot2)
> library(scales)
> library(ggthemes)
> source("R/functions.R")
> source("R/scrape_data.R")
> source("R/totals_by_type.R")
> source("R/per_event.R")
> source("R/daily_count.R")
> 
> russia_url <- "https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html"
> ukraine_url <- "https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-ukrainian.html"
> 
> tmp <-
>   file.path("outputfiles", sprintf("scrape_oryx_%s.log", format(Sys.time(), "%Y%m%dT%H%M%S")))
> lf <- logr::log_open(tmp)
> today <- format(Sys.Date(), "%Y-%m-%d")
> 
> 
> totals_by_system <- create_data() %>%
>   readr::write_csv(., file = glue::glue("outputfiles/totals_by_system.csv"))
> 
> #' Write Event Tables
> create_event_tables(totals_by_system, status)
> 
> totals_by_system_wide <- total_by_system_wide(totals_by_system) %>%
>   readr::write_csv(.,
>                    file = glue::glue("outputfiles/totals_by_system_wide.csv"))
> 
> total_by_type <- totals_by_type() %>%
>   readr::write_csv(., file = glue::glue("outputfiles/totals_by_type.csv"))
> 
> daily_count <- daily_count() %>%
>   readr::write_csv(., file = "outputfiles/daily_count.csv")
> 
> rmarkdown::render("index.Rmd")
> 
> logr::log_code()
> logr::log_close()
> 
> writeLines(readLines(lf))

[1] TRUE
Warning message:
In system("timedatectl", intern = TRUE) :
  running command 'timedatectl' had status 1

[1] "Error in assign(\"last.warning\", NULL, envir = baseenv()) : \n  cannot change value of locked binding for 'last.warning'\nCalls: <Anonymous> -> assign\n"
[1] "Error in assign(\"last.warning\", NULL, envir = baseenv()) : \n  cannot change value of locked binding for 'last.warning'\nCalls: <Anonymous> -> assign\n"
[1] "Traceback:"
Traceback: 
[1] "2: assign(\"last.warning\", NULL, envir = baseenv())"
[2] "1: logr::log_close()"                                
[1] "2: assign(\"last.warning\", NULL, envir = baseenv())"
[2] "1: logr::log_close()"                                

[1] "Error in readLines(lf) : object 'lf' not found\nCalls: writeLines -> readLines\n"
Error in readLines(lf) : object 'lf' not found
Calls: writeLines -> readLines
 
[1] "Traceback:"
Traceback: 
[1] "2: readLines(lf)"             "1: writeLines(readLines(lf))"
[1] "2: readLines(lf)"             "1: writeLines(readLines(lf))"

